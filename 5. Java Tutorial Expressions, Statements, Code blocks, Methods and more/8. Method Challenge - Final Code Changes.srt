1
00:00:04,220 --> 00:00:06,720
Now just before we move on to the next

2
00:00:06,720 --> 00:00:08,599
video, which is about method overloading

3
00:00:08,599 --> 00:00:11,490
there is still another small logical

4
00:00:11,490 --> 00:00:14,070
problem in our conditions in the program

5
00:00:14,070 --> 00:00:16,199
that we've been currently working on and

6
00:00:16,199 --> 00:00:17,580
if he carefully checked the else

7
00:00:17,580 --> 00:00:19,890
statement the if-else statement in the

8
00:00:19,890 --> 00:00:21,960
calculated high score position let's

9
00:00:21,960 --> 00:00:22,980
come down have a look there,

10
00:00:22,980 --> 00:00:26,580
let's scroll that down

11
00:00:26,580 --> 00:00:30,390
so down here starting from 165 so

12
00:00:30,390 --> 00:00:32,190
firstly the first part of the condition

13
00:00:32,190 --> 00:00:34,530
is checking to see up here this first

14
00:00:34,530 --> 00:00:35,850
one if the players score is greater than

15
00:00:35,850 --> 00:00:39,120
equal to 1000 and if that's false then

16
00:00:39,120 --> 00:00:41,730
obviously score isn't greater than 1000

17
00:00:41,730 --> 00:00:43,200
so in other words when the first

18
00:00:43,200 --> 00:00:45,540
condition is false what that means is

19
00:00:45,540 --> 00:00:48,180
the score is less than 1000, so we get to

20
00:00:48,180 --> 00:00:50,129
anywhere past that if that's true these

21
00:00:50,129 --> 00:00:52,140
scores down here we know for a fact that

22
00:00:52,140 --> 00:00:54,780
they aren't greater than 1000 because we

23
00:00:54,780 --> 00:00:57,690
return false there but note that

24
00:00:57,690 --> 00:00:59,670
in the second if, we're checking over

25
00:00:59,670 --> 00:01:01,290
here to see whether the score player

26
00:01:01,290 --> 00:01:03,690
score is less than 1000 but again if we

27
00:01:03,690 --> 00:01:05,070
managed to get to this line we know

28
00:01:05,070 --> 00:01:07,050
already that the player score is less

29
00:01:07,050 --> 00:01:08,580
than 1000, otherwise we wouldn't have got

30
00:01:08,580 --> 00:01:10,530
to that line, so the bottom line here is

31
00:01:10,530 --> 00:01:12,660
that we can remove that condition since

32
00:01:12,660 --> 00:01:15,509
it's always true, in other words because

33
00:01:15,509 --> 00:01:17,460
the condition before this one at the top

34
00:01:17,460 --> 00:01:20,190
we've already established that the

35
00:01:20,190 --> 00:01:22,680
player score greater than equal to 1000

36
00:01:22,680 --> 00:01:24,840
was false, this code here in other

37
00:01:24,840 --> 00:01:27,479
words and if you've got the latest

38
00:01:27,479 --> 00:01:30,180
intellij if you hover over here it will

39
00:01:30,180 --> 00:01:31,679
actually tell you condition they're

40
00:01:31,679 --> 00:01:32,850
players called less than thousand is

41
00:01:32,850 --> 00:01:35,640
always true when reached, so in other

42
00:01:35,640 --> 00:01:37,110
words when we get to this line again the

43
00:01:37,110 --> 00:01:39,030
condition is already true, so there's no

44
00:01:39,030 --> 00:01:41,459
reason to check that condition again, so

45
00:01:41,459 --> 00:01:43,500
what we should do is remove that and the

46
00:01:43,500 --> 00:01:45,060
same goes for the second condition there

47
00:01:45,060 --> 00:01:46,890
we've got the same problem there because

48
00:01:46,890 --> 00:01:48,270
we're checking to see whether the score

49
00:01:48,270 --> 00:01:50,550
is greater than equal to 500 here and we

50
00:01:50,550 --> 00:01:52,140
only get to this grid of group of code

51
00:01:52,140 --> 00:01:54,240
if we if we know that the players score

52
00:01:54,240 --> 00:01:56,310
is less than 500, so it's telling us

53
00:01:56,310 --> 00:01:57,780
that's a redundant bit of code as well

54
00:01:57,780 --> 00:02:00,170
so I'm going to remove both those paths

55
00:02:00,170 --> 00:02:03,000
up to and including the n % the two

56
00:02:03,000 --> 00:02:06,539
ampersands for the end and delete that

57
00:02:06,539 --> 00:02:08,849
as well and if we actually run this up

58
00:02:08,849 --> 00:02:13,410
now, you can see we've still got the same

59
00:02:13,410 --> 00:02:14,760
results than what we got in the last

60
00:02:14,760 --> 00:02:16,770
video, the bottom line is we don't have

61
00:02:16,770 --> 00:02:19,140
to check the extra condition again since

62
00:02:19,140 --> 00:02:21,150
that condition will always be true when

63
00:02:21,150 --> 00:02:24,989
it reached that line of code but keep in

64
00:02:24,989 --> 00:02:26,970
mind that this challenge can be written

65
00:02:26,970 --> 00:02:29,010
in many different ways, you don't have to

66
00:02:29,010 --> 00:02:30,900
match every single line with my solution

67
00:02:30,900 --> 00:02:33,660
but it should work the same as per the

68
00:02:33,660 --> 00:02:34,830
challenge text and you should get the

69
00:02:34,830 --> 00:02:37,110
same results in other words and you can

70
00:02:37,110 --> 00:02:39,340
also remove the else statement

71
00:02:39,340 --> 00:02:40,870
have a return after the closing curly

72
00:02:40,870 --> 00:02:43,209
brace the code would behave the same in

73
00:02:43,209 --> 00:02:45,040
that scenario, so let's do that just to

74
00:02:45,040 --> 00:02:47,410
be consistent there at the moment we've

75
00:02:47,410 --> 00:02:50,230
got this else code here, so what we could

76
00:02:50,230 --> 00:02:53,190
do instead we could actually remove that

77
00:02:53,190 --> 00:02:56,709
you could just delete that code the

78
00:02:56,709 --> 00:02:57,760
easiest way to do that would be just to

79
00:02:57,760 --> 00:02:59,799
delete the else there and delete this

80
00:02:59,799 --> 00:03:03,700
extra code brace, let's put that down

81
00:03:03,700 --> 00:03:06,250
there like so so basically now we

82
00:03:06,250 --> 00:03:08,410
haven't got another else so if those

83
00:03:08,410 --> 00:03:11,260
three conditions end up being false it

84
00:03:11,260 --> 00:03:12,519
drops down to here then we're just going

85
00:03:12,519 --> 00:03:14,349
to return for anyway, just to make sure

86
00:03:14,349 --> 00:03:15,640
that we'll run it to make sure we've got

87
00:03:15,640 --> 00:03:18,579
the same results and you can see we've

88
00:03:18,579 --> 00:03:20,620
still got the same results showing.

89
00:03:20,620 --> 00:03:22,599
Alright, now before I end the video I want

90
00:03:22,599 --> 00:03:25,060
to show you one more solution that

91
00:03:25,060 --> 00:03:26,920
actually eliminates multiple return

92
00:03:26,920 --> 00:03:29,230
statements, multiple return statements can

93
00:03:29,230 --> 00:03:31,209
be confusing for people starting out in

94
00:03:31,209 --> 00:03:33,370
a programming language, so let's instead

95
00:03:33,370 --> 00:03:35,739
make our code easy to follow and use

96
00:03:35,739 --> 00:03:38,170
only one return statement, so we're going

97
00:03:38,170 --> 00:03:40,870
to do to achieve that is I'm going to

98
00:03:40,870 --> 00:03:42,879
start by commenting out the code here

99
00:03:42,879 --> 00:03:46,120
all this code up to and including the

100
00:03:46,120 --> 00:03:49,329
return for comment that out and what we

101
00:03:49,329 --> 00:03:50,680
can do instead of having these multiple

102
00:03:50,680 --> 00:03:52,569
return statements that were their return 1

103
00:03:52,569 --> 00:03:55,630
return 2, return 3 and return 4, we're

104
00:03:55,630 --> 00:03:58,090
going to assume it or return 4 so what

105
00:03:58,090 --> 00:04:00,579
we can do is by starting the code I'm

106
00:04:00,579 --> 00:04:02,310
going to come down here and start typing

107
00:04:02,310 --> 00:04:09,160
and into an int position equals 4 to

108
00:04:09,160 --> 00:04:12,060
start out with and we're doing that

109
00:04:12,060 --> 00:04:17,979
because we're assuming position 4 will

110
00:04:17,979 --> 00:04:21,849
be returned and then what we're going to

111
00:04:21,849 --> 00:04:23,440
do you're going to come down the next

112
00:04:23,440 --> 00:04:25,330
time we're going to put if parentheses

113
00:04:25,330 --> 00:04:28,900
player score is greater than equal to

114
00:04:28,900 --> 00:04:32,740
100, we're going to type in code block

115
00:04:32,740 --> 00:04:36,400
position equals 1 and you can probably

116
00:04:36,400 --> 00:04:38,080
guess now hopefully what I'm going to do

117
00:04:38,080 --> 00:04:39,190
with the rest of the code, I'm going to

118
00:04:39,190 --> 00:04:43,690
put else if parentheses players score is

119
00:04:43,690 --> 00:04:46,450
greater than equal to 500 and open a

120
00:04:46,450 --> 00:04:50,080
code block position equals 2, we're gonna

121
00:04:50,080 --> 00:04:52,270
put another else there the office is

122
00:04:52,270 --> 00:04:53,970
gonna be else if

123
00:04:53,970 --> 00:04:57,160
parentheses player score is greater than

124
00:04:57,160 --> 00:05:00,490
equal to 100 open a code block put

125
00:05:00,490 --> 00:05:03,430
position equals 3 then the last

126
00:05:03,430 --> 00:05:05,650
statement we now need to add is the

127
00:05:05,650 --> 00:05:07,360
return statement that actually returns

128
00:05:07,360 --> 00:05:09,790
the value but instead of typing a fixed

129
00:05:09,790 --> 00:05:11,010
number we're going to type return

130
00:05:11,010 --> 00:05:14,170
position because I've already calculated

131
00:05:14,170 --> 00:05:15,850
the position to be either the values 1 2

132
00:05:15,850 --> 00:05:19,480
3 or 4 depending on the players score.

133
00:05:19,480 --> 00:05:24,670
So let's actually run this and as you

134
00:05:24,670 --> 00:05:26,440
can see again, we've got the same results

135
00:05:26,440 --> 00:05:28,480
here but with different code and that's

136
00:05:28,480 --> 00:05:29,650
us confirming the fact that there's

137
00:05:29,650 --> 00:05:32,470
always almost always multiple ways to

138
00:05:32,470 --> 00:05:35,200
solve a particular challenge and to code

139
00:05:35,200 --> 00:05:36,940
a particular method in Java or in any

140
00:05:36,940 --> 00:05:38,920
programming language, so what's actually

141
00:05:38,920 --> 00:05:40,360
happening here with this code that we've

142
00:05:40,360 --> 00:05:42,610
written is that we've got a variable

143
00:05:42,610 --> 00:05:44,320
that we've set based on the condition

144
00:05:44,320 --> 00:05:46,330
and we're returning the value of the

145
00:05:46,330 --> 00:05:48,520
position variable, so therefore we've

146
00:05:48,520 --> 00:05:50,530
only got one return statement instead of

147
00:05:50,530 --> 00:05:52,270
having forward turn statements as we did

148
00:05:52,270 --> 00:05:54,820
and then they'll commented out code, so

149
00:05:54,820 --> 00:05:56,560
many developers find this easy to read

150
00:05:56,560 --> 00:05:58,540
and follow and certainly outside for

151
00:05:58,540 --> 00:06:01,120
beginners it is most likely easier

152
00:06:01,120 --> 00:06:02,170
because there's only one return

153
00:06:02,170 --> 00:06:04,210
statement to think about, so at the

154
00:06:04,210 --> 00:06:05,830
beginning of our method calculate high

155
00:06:05,830 --> 00:06:08,500
score position on line 76, we're setting

156
00:06:08,500 --> 00:06:10,900
position to 4 and that's because if none

157
00:06:10,900 --> 00:06:12,940
of their conditions are true in our

158
00:06:12,940 --> 00:06:15,970
testing, but the codes on lines 78

159
00:06:15,970 --> 00:06:18,220
through 84 then the 4 is going to be

160
00:06:18,220 --> 00:06:19,990
returned because we initially set it to

161
00:06:19,990 --> 00:06:22,420
4 and the position variable wasn't

162
00:06:22,420 --> 00:06:24,400
changed in value, so based on the

163
00:06:24,400 --> 00:06:26,260
condition variable, we'll get a different

164
00:06:26,260 --> 00:06:28,060
value and then that value will be

165
00:06:28,060 --> 00:06:31,240
returned with the code on line 86,

166
00:06:31,240 --> 00:06:32,920
so basically in case the score the player's

167
00:06:32,920 --> 00:06:34,950
score is greater than equal to 1000

168
00:06:34,950 --> 00:06:37,540
positions set to 1 if the player score

169
00:06:37,540 --> 00:06:39,700
is greater than equal to 500 it's going

170
00:06:39,700 --> 00:06:41,710
to be set to 2 otherwise if the player

171
00:06:41,710 --> 00:06:43,240
score is greater than equal to 100

172
00:06:43,240 --> 00:06:44,680
the musicians 3 and of course we've

173
00:06:44,680 --> 00:06:47,260
determined on line 76 that position was

174
00:06:47,260 --> 00:06:49,750
4 initially so that will be the default

175
00:06:49,750 --> 00:06:51,760
so if all three of these conditions end

176
00:06:51,760 --> 00:06:54,430
up being false, the position will stay

177
00:06:54,430 --> 00:06:56,320
with the value of 4 and then that will

178
00:06:56,320 --> 00:06:59,170
be returned. Alright so that's a sum

179
00:06:59,170 --> 00:07:01,390
like a bug fix and an alternative way to

180
00:07:01,390 --> 00:07:03,250
do things and again I just really want

181
00:07:03,250 --> 00:07:05,350
to make it very clear that there are

182
00:07:05,350 --> 00:07:06,940
multiple ways to saw

183
00:07:06,940 --> 00:07:09,250
of problems in computing so don't be too

184
00:07:09,250 --> 00:07:10,870
were concerned if your code looks

185
00:07:10,870 --> 00:07:12,610
different to mine the main thing is that

186
00:07:12,610 --> 00:07:15,160
when you run it, it performs the same it

187
00:07:15,160 --> 00:07:16,750
gets the same results that's really the

188
00:07:16,750 --> 00:07:18,550
key thing here and as I'm showing you

189
00:07:18,550 --> 00:07:20,230
that there are certainly many ways to

190
00:07:20,230 --> 00:07:22,960
solve a particular problem. Alright, so

191
00:07:22,960 --> 00:07:24,160
that's methods I hope you've got a lot

192
00:07:24,160 --> 00:07:28,260
out of it. I'll see you in the next video.

