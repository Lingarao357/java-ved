1
00:00:05,220 --> 00:00:10,500
In the previous video we started a
discussion about operators in Java in

2
00:00:10,500 --> 00:00:13,800
this video we want to got through finish
the discussion by introducing you to

3
00:00:13,800 --> 00:00:17,890
some additional operators in case you're
wondering why the color on the screen

4
00:00:17,890 --> 00:00:20,010
has changed since the last video

5
00:00:20,010 --> 00:00:24,070
the reason is that I am re-recording this
video and that's because there were a

6
00:00:24,070 --> 00:00:27,560
couple of issues with the original
recordings so its an updated version

7
00:00:27,560 --> 00:00:32,300
of IntelliJ and it's now done in
this color because I'm doing that in the

8
00:00:32,300 --> 00:00:35,380
later parts of this course because
it is proven to be better for the eyes in

9
00:00:35,380 --> 00:00:40,450
this particular color ok so moving on so
if you recall we actually finished off

10
00:00:40,450 --> 00:00:46,000
talking about the AND operator and you can see
an example of the an operator on line 55

11
00:00:46,000 --> 00:00:50,490
checking to see whether both
conditions were true so both what was on

12
00:00:50,490 --> 00:00:54,970
the left hand side of the 2 ampersands and also what's on the right

13
00:00:54,970 --> 00:00:58,700
hand side and we would only get the output
showing on line 56

14
00:00:58,700 --> 00:01:03,870
if both conditions were actually true now
what I suggest you do is in the case

15
00:01:03,870 --> 00:01:07,890
where you've got these
two conditions it's a good idea to

16
00:01:07,890 --> 00:01:16,930
actually put a bracket around each set
of conditions...

17
00:01:16,930 --> 00:01:21,160
and you don't have to do that there are
some issues with operator precedence but

18
00:01:21,160 --> 00:01:26,630
we'll talk about that later but it does
make your code easier and more

19
00:01:26,630 --> 00:01:32,140
unambiguous because what you doing it's pretty clear
their that the test is now for this part here

20
00:01:32,140 --> 00:01:35,830
that's the first condition in brackets
and here's the second condition in

21
00:01:35,830 --> 00:01:39,810
brackets and if you run it will
still get the same output that we got

22
00:01:39,810 --> 00:01:45,340
previously we got the high score but
it's just a lot clearer what's actually

23
00:01:45,340 --> 00:01:49,640
going on using brackets so I do
suggest where possible with conditions

24
00:01:49,640 --> 00:01:54,530
it's a good idea to put brackets around
it just to clarify ok moving on to the

25
00:01:54,530 --> 00:02:00,360
next operator and what we're going to do
is talk about the OR operator now the AND

26
00:02:00,360 --> 00:02:05,590
operator again both conditions with the AND
operator have to be true but with the

27
00:02:05,590 --> 00:02:10,350
OR operator only one of the conditions
need to be true so lets type some code

28
00:02:10,350 --> 00:02:16,860
to clarify that so put...

29
00:02:16,860 --> 00:02:22,370
...I'm using the

30
00:02:22,370 --> 00:02:28,640
OR which is the 2 pipe characters and the common error is using 1, 1

31
00:02:28,640 --> 00:02:31,510
is actually valid but it's not all
you'll get a completely different result

32
00:02:31,510 --> 00:02:37,290
and that's a same with the AND and you can have ampersand but that will give you a

33
00:02:37,290 --> 00:02:40,660
different result so make sure you are
using 2 because that's the actually the

34
00:02:40,660 --> 00:02:45,480
the correct and operator and
this is the correct or operator so moving on now

35
00:02:45,480 --> 00:02:50,380
to test firstly to see whether top
score is greater than 90 or lets also

36
00:02:50,380 --> 00:03:00,480
do a test for....and by the way I'm not sure if I showed you that

37
00:03:00,480 --> 00:03:06,200
before but if you type sout as I have their
then press tab notice how IntelliJ changes that for

38
00:03:06,200 --> 00:03:15,290
you and save a bit of typing...you can see what we have done their we've

39
00:03:15,290 --> 00:03:22,540
said if top scorers greater than 90 or if the second top
score is less than equal to 90 then output it so if we run

40
00:03:22,540 --> 00:03:27,350
this we should find that it does output because in
this example firstly on line 50 top

41
00:03:27,350 --> 00:03:29,610
score is 80 so that is false

42
00:03:29,610 --> 00:03:34,260
but if we look at the assignment on line
54 second top scorer is less than equal to

43
00:03:34,260 --> 00:03:38,550
90 because we've assigned 81 to
that so that's true because the second

44
00:03:38,550 --> 00:03:43,010
condition is true then we should get the\output showing on the screen and you

45
00:03:43,010 --> 00:03:46,040
can see that we've just got one of these
tests is true

46
00:03:46,040 --> 00:03:52,100
if I changed this let us make the second top
score 75 so we've now got the scenario

47
00:03:52,100 --> 00:03:57,410
where on line 50 top score is 80 this
first condition is false and on line 54

48
00:03:57,410 --> 00:04:03,560
second top score is 95 so the second
condition is false so therefore false or

49
00:04:03,560 --> 00:04:08,090
false and we have to have at least one
true so this now should not show that

50
00:04:08,090 --> 00:04:11,830
message so if we run this again one of
these test is true should not be printed

51
00:04:11,830 --> 00:04:17,340
and you can see that's the case so
that's what the or operator does so I'm going to

52
00:04:17,340 --> 00:04:22,140
undo that and set that back to the
original value ok so moving on

53
00:04:22,140 --> 00:04:25,530
couple of little challenges here for you
just to try and figure out so let's just

54
00:04:25,530 --> 00:04:32,030
start off with typing....

55
00:04:32,030 --> 00:04:44,740
...now you have notice that IntelliJ is

56
00:04:44,740 --> 00:04:51,620
underlining that and saying confusingly incompatible
types required boolean found int but looking

57
00:04:51,620 --> 00:04:56,630
at that you think well aren't we testing to see
whether the new value is equal to 50 that 50 that is being typed their

58
00:04:56,630 --> 00:04:58,470
that's the correct variable name

59
00:04:58,470 --> 00:05:02,990
well what we've done there is we only used the 1 equal sign
remembering that the one

60
00:05:02,990 --> 00:05:07,310
equals sign is an assignment so that is
setting the value of what's on the left

61
00:05:07,310 --> 00:05:11,940
hand side to the value of 50 which is on
the right hand side so in this case that

62
00:05:11,940 --> 00:05:17,680
setting the value 50 to new value or new value I should say to the value of 50 so if we wanted to

63
00:05:17,680 --> 00:05:22,150
test the value if it is equal to we
need to put the two equal signs and by

64
00:05:22,150 --> 00:05:26,400
doing that you can see that the error
then disappears and we can change this

65
00:05:26,400 --> 00:05:31,630
because it's no longer an error

66
00:05:31,630 --> 00:05:41,110
...so if we run that this is true is showing
where we had just the one equal sign of course we

67
00:05:41,110 --> 00:05:45,750
couldn't run it because we actually have
an error so if we tried to run that we will actually

68
00:05:45,750 --> 00:05:46,870
get an error

69
00:05:46,870 --> 00:05:52,790
int could not be converted to boolean and that's because
we are trying to assign rather than set the value

70
00:05:52,790 --> 00:05:57,200
so that is the equals but that's fine so that
helped IntelliJ help us their and it gave us

71
00:05:57,200 --> 00:06:00,720
the error we were able to fix it
because we weren't able to get the code

72
00:06:00,720 --> 00:06:04,560
running until that fix was made but there's
another scenario that can trip you up

73
00:06:04,560 --> 00:06:17,620
and that's losing booleans so if we type...

74
00:06:17,620 --> 00:06:25,470
....because again at face value

75
00:06:25,470 --> 00:06:32,160
you will think ok if the sign false to our billion is
car on line 65 and looking quickly and on

76
00:06:32,160 --> 00:06:37,150
66 we are checking to see whether isCar equals
true so surely that should fail

77
00:06:37,150 --> 00:06:38,980
because isCar is false

78
00:06:38,980 --> 00:06:44,710
if run this we get this is not supposed to
happen and you might be wondering what

79
00:06:44,710 --> 00:06:48,100
two things here firstly why is that
happening but secondly we didn't get an

80
00:06:48,100 --> 00:06:51,820
error like we did when we did the assignment
on line 62

81
00:06:51,820 --> 00:06:59,130
the reason for that is when you actually
make an assignment of value any value what is

82
00:06:59,130 --> 00:07:03,860
returned is whatever they assignment was so in other words in the case here

83
00:07:03,860 --> 00:07:11,050
of new value equals 50 if we set it back to 1 equal sign as an expression that returns

84
00:07:11,050 --> 00:07:16,530
whatever new value was assign too so in
other words that would be returned as 50

85
00:07:16,530 --> 00:07:20,900
if we're actually checking the condition
now in this particular case we got an

86
00:07:20,900 --> 00:07:25,420
error because when we're doing and if
comparison of course we need a boolean

87
00:07:25,420 --> 00:07:28,410
to be able to determine if its true or
false so that's why IntelliJ was able to

88
00:07:28,410 --> 00:07:32,130
tell us there's an error but in the second
scenario we're dealing with a boolean

89
00:07:32,130 --> 00:07:37,480
already and we're assigning the value of
true to this boolean by only using the

90
00:07:37,480 --> 00:07:42,880
one equal sign and consequently the
line of code actually works so that can be one to trip

91
00:07:42,880 --> 00:07:45,150
you up with booleans so make sure you do

92
00:07:45,150 --> 00:07:50,600
2 equal signs to avoid that error so now if we put...with

93
00:07:50,600 --> 00:07:55,470
the correct two equal signs we run that we won't get
that message showing any more messages

94
00:07:55,470 --> 00:07:59,460
no longer showing and the reason for
that of course is because we've correctly

95
00:07:59,460 --> 00:08:03,340
done an equals test instead of trying to
do a comparison test and obviously in

96
00:08:03,340 --> 00:08:07,240
that scenario another way to avoid that
with a boolean would be to just change this

97
00:08:07,240 --> 00:08:12,350
and put...because by default that is not even putting

98
00:08:12,350 --> 00:08:15,440
the equal signs and you're not gonna get
into difficulty and it saves you a bit of code

99
00:08:15,440 --> 00:08:22,340
isCar will return whatever the value of is in this case it
will return false because we assigned it on

100
00:08:22,340 --> 00:08:27,260
line 65 so run that again we shouldn't get an
error and we shouldn't get that output

101
00:08:27,260 --> 00:08:29,720
and we haven't got that so that's good

102
00:08:29,720 --> 00:08:36,060
last operator to discuss is the
ternary operator now this is a way to

103
00:08:36,060 --> 00:08:40,660
set a value based on two conditions
so sounds confusing but let's actually

104
00:08:40,660 --> 00:08:46,900
type it out and then we'll explain or talk
through it so will type....

105
00:08:46,900 --> 00:08:58,060
..so this is the format

106
00:08:58,060 --> 00:09:04,100
of a ternary operator so basically its saying if
is car is evaluated to true that's the

107
00:09:04,100 --> 00:09:09,240
expression before the question mark so
we saying is car this the value that its

108
00:09:09,240 --> 00:09:09,950
looking for

109
00:09:09,950 --> 00:09:15,700
question mark is it true if so we are going to
return true and the colon is these sort

110
00:09:15,700 --> 00:09:19,370
of like an otherwise return false so
again what we're saying here basically

111
00:09:19,370 --> 00:09:26,260
this code is a shortcut for saying if is
car is equal equal true then was car

112
00:09:26,260 --> 00:09:31,370
equal true else isCar equal false
so we are assigning that value based on whether is

113
00:09:31,370 --> 00:09:37,440
car is true or false sounds a bit
confusing but lets run it to confirm and will put some code here so put

114
00:09:37,440 --> 00:09:45,250
....

115
00:09:45,250 --> 00:09:55,610
..so run that first we should find that it doesn't work

116
00:09:55,610 --> 00:10:04,430
because of course we have assigned on line 65
isCar to false so we run that we haven't got

117
00:10:04,430 --> 00:10:13,000
was car is true their so that's correct but if we change
this now and will put here..

118
00:10:13,000 --> 00:10:19,080
...so we have assigned it to try so now what we're
saying is boolean is equal to the checking

119
00:10:19,080 --> 00:10:22,300
that value if isCar is true it's gonna
return true otherwise it's gonna return

120
00:10:22,300 --> 00:10:26,940
false so now wasCar should be equal to true because of that and if we run that we

121
00:10:26,940 --> 00:10:32,460
should get the message wasCar is true
so run that wasCar is true

122
00:10:32,460 --> 00:10:36,980
so their you go that is the ternary operator and again that is just a bit of a shortcut but you will see that in

123
00:10:36,980 --> 00:10:41,140
Java code so it's a good thing to
actually have the knowledge under your belt

124
00:10:41,140 --> 00:10:46,690
ok next i want to just go and show you
a list of operators from the Oracle

125
00:10:46,690 --> 00:10:53,500
website so I'm gonna open a browser and paste this in
the link is in the Resources section you

126
00:10:53,500 --> 00:11:08,010
see the link up here just let me check this
nuts and bolts not sure what happened there but

127
00:11:08,010 --> 00:11:13,030
this is a handy list because it offers a
summary of all the operators and again this

128
00:11:13,030 --> 00:11:16,830
link will be available in the Resources
section so some of the operators have

129
00:11:16,830 --> 00:11:20,010
been discussed you can see a lot of
those have been discussed and some of

130
00:11:20,010 --> 00:11:24,890
them haven't been though some of them for example the
instanceof operator will be talking

131
00:11:24,890 --> 00:11:27,870
about that later in the course that's
more advance thing when we're

132
00:11:27,870 --> 00:11:31,720
dealing with classes and we are not yet at that stage of the course yet but the ones down here

133
00:11:31,720 --> 00:11:36,560
also the bit wise and bit shift operators
we will tackle those when if needed but

134
00:11:36,560 --> 00:11:40,100
it's fairly rare that you would be
using those and if you remember early in

135
00:11:40,100 --> 00:11:44,060
the video I mentioned you need to be
careful about using a single ampersand

136
00:11:44,060 --> 00:11:47,840
and single pipe characte when you are
thinking about using the And

137
00:11:47,840 --> 00:11:52,200
you can see that it uses a bit wise AND
with a single ampersand and a bit wise

138
00:11:52,200 --> 00:11:56,100
inclusive OR for a single pipe character
that's why we need to make sure that you

139
00:11:56,100 --> 00:12:01,410
typed them these ones here correctly so
you getting the right results so okay

140
00:12:01,410 --> 00:12:06,560
it's time now for a challenge so lets create that back in IntelliJ and

141
00:12:06,560 --> 00:12:08,450
see what you come up with

142
00:12:08,450 --> 00:12:28,140
ok so here is to challenge firstly
create a double variable with a value

143
00:12:28,140 --> 00:12:33,660
of 20 create a second variable of type double with a value of 80 and you want to add both

144
00:12:33,660 --> 00:12:38,960
numbers up and multiply the result by 25
and you need to then used the reminder

145
00:12:38,960 --> 00:12:42,160
operator which we talked about in the
previous video to figure out what the

146
00:12:42,160 --> 00:12:48,860
remainder is from the sum that was
calculated in Step 3 divide by 40 and of course

147
00:12:48,860 --> 00:12:52,850
that's what the remainder those and number
5 write an if statement

148
00:12:52,850 --> 00:12:58,410
that displays a message saying total was
over the limit if the

149
00:12:58,410 --> 00:13:02,850
remaining total which was basically using the
result of using the reminder operator

150
00:13:02,850 --> 00:13:08,990
in step 4 is equal to 20 or less so go
away and do that pause the video now and when

151
00:13:08,990 --> 00:13:12,650
you finish you want to come back and
compare your results to mine start the

152
00:13:12,650 --> 00:13:17,550
video then so pause the video now

153
00:13:17,550 --> 00:13:22,100
ok so how did you get on hopefully you figured
it out so lets now go through my version

154
00:13:22,100 --> 00:13:26,850
of the code I'm gonna start on step 1
create a double variable with a value of

155
00:13:26,850 --> 00:13:27,830
20 so type...

156
00:13:27,830 --> 00:13:37,180
...now optionally I can put d their don't have to

157
00:13:37,180 --> 00:13:40,940
put d their because in the expression
Java can figure out that we meant a

158
00:13:40,940 --> 00:13:50,400
double so that's optional if you put that and will put..

159
00:13:50,400 --> 00:13:55,790
....

160
00:13:55,790 --> 00:13:59,670
now next we need to add both numbers up that's
the two numbers for steps one and two

161
00:13:59,670 --> 00:14:10,450
and multiplied by twenty five so let's
try and type...

162
00:14:10,450 --> 00:14:19,070
.....

163
00:14:19,070 --> 00:14:24,350
ok step 4  use the remainder operator to
figure out the remainder from the sum of

164
00:14:24,350 --> 00:14:29,840
3 divided by 40 so basically that's your not
having to re divide it again by forty

165
00:14:29,840 --> 00:14:33,030
what we're trying to do is use that
remind so to do that we're going to put...

166
00:14:33,030 --> 00:14:40,680
....it could be an int by the way
but we purposely doing it as a double

167
00:14:40,680 --> 00:14:46,380
because we're talking about doubles here
but an int would be fine...

168
00:14:46,380 --> 00:14:56,520
....this is fifth step in the if statement that

169
00:14:56,520 --> 00:15:00,760
displays a message total was over the
limit if the remaining total is less

170
00:15:00,760 --> 00:15:07,830
than or equal to 20 or less so we are gonna
put....

171
00:15:07,830 --> 00:15:14,600
....

172
00:15:14,600 --> 00:15:24,500
so that's the first cut of our code lets try actually try running that total was over the limit so what we need

173
00:15:24,500 --> 00:15:30,750
to do is just try and go through this step-by-step
so what we'll do is will actually do some outputting here so

174
00:15:30,750 --> 00:15:40,880
on this first line here we are gonna put...so we are just gonna display that

175
00:15:40,880 --> 00:15:43,930
to the screen so you think they're in
theory

176
00:15:43,930 --> 00:15:53,970
my first value plus my second value so that's a hundred times 25 should be 2500 so if you run that you can

177
00:15:53,970 --> 00:15:58,970
see here we've got a weird result
we've got my total is 2020 and now

178
00:15:58,970 --> 00:16:03,630
that's actually a problem even though ultimately the
last step has worked we are getting a weird

179
00:16:03,630 --> 00:16:08,420
value here so why we are getting that value well this is
got to do with operator precedence so

180
00:16:08,420 --> 00:16:14,100
what's happening is the order that Java
is going through to calculate these codes

181
00:16:14,100 --> 00:16:19,090
are different so what we really wanted
to do was add the two values up first

182
00:16:19,090 --> 00:16:23,720
my thirst value and my second and then
multiply the result by 25 but in actual

183
00:16:23,720 --> 00:16:27,550
fact what's happening is because we've
used the multiplication that's got a higher

184
00:16:27,550 --> 00:16:32,200
priority more higher precedence and that is being
evaluated first so what's actually happening

185
00:16:32,200 --> 00:16:43,110
is we're getting 80 * 25 first
so if we have a look at that so 80 * 25 is 2000 + 20

186
00:16:43,110 --> 00:16:47,110
being added to it so that's where we are getting the
2020 so what we actually need to do here

187
00:16:47,110 --> 00:16:55,270
to clarify this is why brackets are
a good idea we need to tell Java calculate that first and then

188
00:16:55,270 --> 00:17:03,310
multiply the result by 25 so that should give
us 2500 so let us go ahead and do that

189
00:17:03,310 --> 00:17:09,930
we've now correctly got the 2500 now the
remainder basically what's left over

190
00:17:09,930 --> 00:17:17,020
we've dividing 2500 effectively by 40 so that
should give us a remainder so if we have a look at our calculator how many

191
00:17:17,020 --> 00:17:27,600
times does 2040 go into 2500 so its 2500 divided
by 40 that gives us 62 so 62 times

192
00:17:27,600 --> 00:17:35,240
so we can do 62 times 40 that gives us 2480 so therefore if the

193
00:17:35,240 --> 00:17:40,360
remainder is less than equal to 20 which
it isn't and in this case total is over the limit and just to

194
00:17:40,360 --> 00:17:47,070
be sure we can actually do some output
we can print..

195
00:17:47,070 --> 00:17:51,880
so run that just to clarify
that we are getting the correct results remained

196
00:17:51,880 --> 00:17:56,620
is 20 rather my total is
2500 and total was over the limit

197
00:17:56,620 --> 00:18:00,770
because we've successfully test to see
whether it's less than equal to 20 and

198
00:18:00,770 --> 00:18:04,200
in terms of operator precedence you can
see that it's now important that you

199
00:18:04,200 --> 00:18:08,390
understand operator precedence and why
you need to make sure that you get that

200
00:18:08,390 --> 00:18:11,930
correct and brackets do help a lot with
that and we'll be talking more about

201
00:18:11,930 --> 00:18:16,230
this in the course but for now I wanna
leave you with a website that is very

202
00:18:16,230 --> 00:18:20,400
useful so if you got to another tab and paste this link and this link will be in the Resources section

203
00:18:20,400 --> 00:18:27,850
so you can go ahead and check yourself this is the precedence table and
you can see more information about how

204
00:18:27,850 --> 00:18:31,650
things work and can be really useful to
try and figure out when you figuring out

205
00:18:31,650 --> 00:18:35,810
how these things work how Java was looking at what you're typing in to

206
00:18:35,810 --> 00:18:38,460
make sure you're actually on the same
page again

207
00:18:38,460 --> 00:18:42,840
some information there that is quite useful to
understand moving forward with your Java

208
00:18:42,840 --> 00:18:47,070
code again the problem was issue here in
terms of precedence you can see that

209
00:18:47,070 --> 00:18:52,040
operator in brackets is got the highest precedence
in Java so it looks at what's in brackets

210
00:18:52,040 --> 00:18:56,630
first but going down the list you can
see here for precedence 12 multiplication divide

211
00:18:56,630 --> 00:19:02,780
and modulus they've got a higher
precedence than + and that's why in our sample

212
00:19:02,780 --> 00:19:06,040
code I've showed you and likewise for subtraction for that matter

213
00:19:06,040 --> 00:19:10,570
that is why the code didn't work either way expected to
because it was doing the multiplication

214
00:19:10,570 --> 00:19:13,800
side of things first alright so I'm going to end the video here now I hope you enjoy

215
00:19:13,800 --> 00:19:14,500
that and in the

216
00:19:14,500 --> 00:19:18,230
next video we're going to start talking
about some of the key words that form

217
00:19:18,230 --> 00:19:20,700
part of Java language so I'll see you in
that video

