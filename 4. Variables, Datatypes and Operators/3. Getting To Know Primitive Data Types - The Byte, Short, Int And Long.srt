1
00:00:05,630 --> 00:00:08,000
In the previous video we got introduced

2
00:00:08,000 --> 00:00:09,910
to variables and we had a bit of

3
00:00:09,910 --> 00:00:12,220
a play around with integer data types.

4
00:00:12,220 --> 00:00:14,290
So now it's time to talk about different

5
00:00:14,290 --> 00:00:16,690
types of data types and more information

6
00:00:16,690 --> 00:00:18,690
about the integer data type.

7
00:00:18,690 --> 00:00:20,750
So I'm going to close this first project

8
00:00:20,750 --> 00:00:23,070
down by clicking on the red cross in the left

9
00:00:23,070 --> 00:00:26,040
hand corner of the screen and I'm going to create

10
00:00:26,040 --> 00:00:27,790
a new project.

11
00:00:27,790 --> 00:00:31,500
I'm going to select Java and click on 'Next'.

12
00:00:31,500 --> 00:00:34,750
I'm going to click on 'Create project from template'.

13
00:00:34,750 --> 00:00:36,560
Click on 'Command Line App'.

14
00:00:36,560 --> 00:00:37,800
Click on 'Next'.

15
00:00:37,800 --> 00:00:41,760
I'm going to call this one 'ByteShortInt'.

16
00:00:41,760 --> 00:00:43,810
And it will make sense as we go through the video,

17
00:00:43,810 --> 00:00:45,830
why I'm doing that. I'm going to change the 'Base

18
00:00:45,830 --> 00:00:49,390
package:' to com.timbuchalka.

19
00:00:49,390 --> 00:00:50,980
But you can change that to literally at this

20
00:00:50,980 --> 00:00:53,670
stage whatever you'd like. Click on 'Finish'.

21
00:00:53,670 --> 00:00:55,940
Now firstly, I just want you to check a setting

22
00:00:55,940 --> 00:00:57,940
before we go any further. I'm going to right-click

23
00:00:57,940 --> 00:01:00,400
the 'project name' here, and them I'm going to go

24
00:01:00,400 --> 00:01:02,400
down to where it says 'Open Module Settings'

25
00:01:02,400 --> 00:01:03,640
and I'm going to select that.

26
00:01:03,640 --> 00:01:06,290
Now you want to make sure that this 'Language level:'

27
00:01:06,290 --> 00:01:10,670
is actually set to '8', which is 'JDK 8'.

28
00:01:10,670 --> 00:01:12,410
In the previous section, we installed

29
00:01:12,410 --> 00:01:14,410
the Java Development Kit version 8.

30
00:01:14,410 --> 00:01:15,900
So we need to set that to '8'

31
00:01:15,900 --> 00:01:17,290
to make sure we don't get an error

32
00:01:17,290 --> 00:01:19,520
as we go through this video. Click on 'OK'.

33
00:01:19,520 --> 00:01:21,240
Okay, I'm going to double-click 'Main.java' now

34
00:01:21,240 --> 00:01:23,490
to make a bit more space, and I'm going to

35
00:01:23,490 --> 00:01:25,530
start writing some code. If you remember

36
00:01:25,530 --> 00:01:27,670
in the previous video we created

37
00:01:27,670 --> 00:01:30,400
some code that did something like this:

38
00:01:30,400 --> 00:01:33,960
'int myValue=10000'.

39
00:01:33,960 --> 00:01:36,070
So what that was doing was creating

40
00:01:36,070 --> 00:01:39,980
a variable called 'myValue' of type 'integer'

41
00:01:39,980 --> 00:01:41,680
with a value '10000'.

42
00:01:41,680 --> 00:01:44,160
So in computing terms the computer has

43
00:01:44,160 --> 00:01:47,160
allocated enough space to store an integer

44
00:01:47,160 --> 00:01:49,980
and it's assigned a name for that variable of 'myValue'.

45
00:01:49,980 --> 00:01:51,780
But what actually is an 'integer'?

46
00:01:51,780 --> 00:01:53,280
We know that it's a whole number,

47
00:01:53,280 --> 00:01:56,080
but, what can we store in an 'integer'? Is it a

48
00:01:56,080 --> 00:01:57,710
infinite number we can store in there?

49
00:01:57,710 --> 00:01:59,560
So in actual fact, in computing terms

50
00:01:59,560 --> 00:02:01,900
normally there's always a limit, as to what it

51
00:02:01,900 --> 00:02:03,750
can do. There's a minimum and a maximum.

52
00:02:03,750 --> 00:02:06,700
So with a data type 'int', the computer assigns

53
00:02:06,700 --> 00:02:09,810
enough space to store a number that is

54
00:02:09,810 --> 00:02:12,110
between the ranges of around about minus

55
00:02:12,110 --> 00:02:16,850
2.147 billion to positive 2.147 billion.

56
00:02:16,850 --> 00:02:18,850
So in other words a number that is in that range.

57
00:02:18,850 --> 00:02:20,880
If we try and use a number that's

58
00:02:20,880 --> 00:02:23,640
smaller than that range or greater than that range,

59
00:02:23,640 --> 00:02:26,330
we'll actually get an error, and that's because it

60
00:02:26,330 --> 00:02:28,340
physically won't fit in the space that

61
00:02:28,340 --> 00:02:29,650
the computer has allocated.

62
00:02:29,650 --> 00:02:32,080
In that scenario what you would use, is you'd use a

63
00:02:32,080 --> 00:02:34,750
different data type, for that particular type of

64
00:02:34,750 --> 00:02:36,300
processing that you want to do.

65
00:02:36,300 --> 00:02:38,180
And I'll be talking more through this course

66
00:02:38,180 --> 00:02:40,360
showing you which data types to use for the

67
00:02:40,360 --> 00:02:42,430
particular scenarios. Generally speaking,

68
00:02:42,430 --> 00:02:45,270
the 'integer' data type, I've introduced that to you first,

69
00:02:45,270 --> 00:02:47,270
because that is the most common data type

70
00:02:47,270 --> 00:02:49,290
and you'll normally use that. That'll be your

71
00:02:49,290 --> 00:02:51,720
first variable if you're looking to

72
00:02:51,720 --> 00:02:53,600
process something in whole numbers

73
00:02:53,600 --> 00:02:55,250
you'd probably be using an 'int'.

74
00:02:55,250 --> 00:02:56,960
But I want to show you some of the alternatives

75
00:02:56,960 --> 00:02:58,510
and just go through so you understand

76
00:02:58,510 --> 00:03:00,750
behind the scenes, the minimum/maximum

77
00:03:00,750 --> 00:03:03,020
values that can be stored in this data type

78
00:03:03,020 --> 00:03:04,590
as well as other data types.

79
00:03:04,590 --> 00:03:06,760
So it turns out the minimum range,

80
00:03:06,760 --> 00:03:10,260
I'm going to delete that and put 'myMinValue'

81
00:03:10,260 --> 00:03:13,310
for an 'integer' is, I said minus two billion,

82
00:03:13,310 --> 00:03:19,980
to it's '-2,147,483,648'.

83
00:03:19,980 --> 00:03:22,740
So that is the smallest number that can fit in an 'integer'.

84
00:03:22,740 --> 00:03:24,960
So we try and make it smaller still

85
00:03:24,960 --> 00:03:27,680
if we make the 8 on the end a 9,

86
00:03:27,680 --> 00:03:30,610
we actually get an error, and if we hover our mouse

87
00:03:30,610 --> 00:03:32,170
'Integer number too large'

88
00:03:32,170 --> 00:03:34,170
So all that sounds a bit funny, you'd think that

89
00:03:34,170 --> 00:03:37,390
that probably should say 'Integer number too small', but

90
00:03:37,390 --> 00:03:39,420
essentially what it's saying is, we've

91
00:03:39,420 --> 00:03:41,260
trying to exceed the boundaries

92
00:03:41,260 --> 00:03:43,340
of the minimum and maximum values of an integer.

93
00:03:43,340 --> 00:03:47,010
I'm setting that back to the smallest acceptable number.

94
00:03:47,010 --> 00:03:48,910
And, I'm just going to copy and paste this,

95
00:03:48,910 --> 00:03:51,890
and we'll create a second variable with maximum value.

96
00:03:51,890 --> 00:03:56,810
The maximum value is, by getting rid of the minus sign at the front,

97
00:03:56,810 --> 00:04:03,050
that's the maximum number, 2,147,483,647.

98
00:04:03,050 --> 00:04:04,840
So again if you try and make that larger,

99
00:04:04,840 --> 00:04:07,640
we'll get the same error, 'Integer number too large'.

100
00:04:07,640 --> 00:04:09,860
So I'll set that back to what it was.

101
00:04:09,860 --> 00:04:13,320
So if you need to do whole number calculations,

102
00:04:13,320 --> 00:04:16,060
an integer will only work if you've got numbers that are

103
00:04:16,060 --> 00:04:18,500
inside that range. Now obviously for the

104
00:04:18,500 --> 00:04:20,500
for the computer to store a number, that

105
00:04:20,500 --> 00:04:23,850
large or that small, takes a certain amount of space.

106
00:04:23,850 --> 00:04:26,690
Now just before I go on I want to make it clear

107
00:04:26,690 --> 00:04:29,240
that any number that you type here that

108
00:04:29,240 --> 00:04:32,580
you see is a fixed number that you're typing in

109
00:04:32,580 --> 00:04:35,410
in a statement like this when you're defining a variable,

110
00:04:35,410 --> 00:04:38,150
this part here to the right is called a 'literal'.

111
00:04:38,150 --> 00:04:40,310
So we're typing in a literal there

112
00:04:40,310 --> 00:04:42,310
to the right and that's a fixed number.

113
00:04:42,310 --> 00:04:44,790
It wouldn't be a literal if you'd done something like

114
00:04:44,790 --> 00:04:47,350
you created something like 'a*b'.

115
00:04:47,350 --> 00:04:50,070
and you have those variables that existed in your project

116
00:04:50,070 --> 00:04:52,440
that would not be a literal, that's an 'expression'.

117
00:04:52,440 --> 00:04:54,530
But where you're typing in a number like that,

118
00:04:54,530 --> 00:04:56,640
I just did an undo, that is a literal.

119
00:04:56,640 --> 00:04:58,620
Now what you can do, is you can

120
00:04:58,620 --> 00:05:01,040
change this. You can put underscores(_) in there

121
00:05:01,040 --> 00:05:02,480
to make the number more readable.

122
00:05:02,480 --> 00:05:05,660
Now this has been a feature that has come out since Java 7.

123
00:05:05,660 --> 00:05:07,470
And that's why I asked you to have a look at

124
00:05:07,470 --> 00:05:09,240
for the module settings when we went into that

125
00:05:09,240 --> 00:05:11,230
earlier in the video, because this

126
00:05:11,230 --> 00:05:12,570
could come up with an error unless you set

127
00:05:12,570 --> 00:05:16,550
module change to test for Java 8.

128
00:05:16,550 --> 00:05:18,760
So if you're typing in a literal,

129
00:05:18,760 --> 00:05:20,630
you can use underscores. That makes the number

130
00:05:20,630 --> 00:05:22,710
a lot more easy to read. So I suggest

131
00:05:22,710 --> 00:05:24,550
when you've got a large literal number that you're

132
00:05:24,550 --> 00:05:26,670
typing in like that you use underscores

133
00:05:26,670 --> 00:05:27,900
to make it more readable.

134
00:05:27,900 --> 00:05:31,300
So as I said the 'integer' is allocated a certain

135
00:05:31,300 --> 00:05:32,820
amount of space by the computer.

136
00:05:32,820 --> 00:05:35,050
Being efficient, if we want to do some

137
00:05:35,050 --> 00:05:37,100
calculations and we don't want to use a number that's

138
00:05:37,100 --> 00:05:38,000
within that range.

139
00:05:38,000 --> 00:05:39,810
We want to use perhaps a much smaller number.

140
00:05:39,810 --> 00:05:41,470
We can use a different data type.

141
00:05:41,470 --> 00:05:43,570
And Java makes available to us

142
00:05:43,570 --> 00:05:45,520
different data types for different types

143
00:05:45,520 --> 00:05:46,790
things that we might want to calculate.

144
00:05:46,790 --> 00:05:48,790
So the next data type I want to discuss

145
00:05:48,790 --> 00:05:51,420
is called a 'byte'. So we can type this like:

146
00:05:51,450 --> 00:05:56,920
'byte myByteValue = 10'

147
00:05:56,920 --> 00:05:58,760
So what we're doing in there is we're telling the

148
00:05:58,760 --> 00:06:01,630
computer is this is a data type of type 'byte',

149
00:06:01,630 --> 00:06:03,430
and we're assigning the value of '10'.

150
00:06:03,430 --> 00:06:05,710
And the name of course we're defining is

151
00:06:05,710 --> 00:06:08,180
'myByteValue'. Now byte value is

152
00:06:09,260 --> 00:06:10,910
is allocated by the computer a much

153
00:06:10,910 --> 00:06:13,540
smaller amount of space, and consequently

154
00:06:13,540 --> 00:06:15,120
can fit a much smaller number.

155
00:06:15,120 --> 00:06:17,720
In actual fact a 'byte' can only store a number

156
00:06:17,720 --> 00:06:22,520
in the range of -128 to 127. So literally,

157
00:06:22,520 --> 00:06:25,360
that is the smallest number that will fit in a 'byte'

158
00:06:25,360 --> 00:06:29,000
and the largest number that can fit is 127.

159
00:06:29,000 --> 00:06:32,100
So if we try and exceed that, we get an error.

160
00:06:32,100 --> 00:06:34,330
And likewise if we try and make the number

161
00:06:34,330 --> 00:06:36,460
smaller than the amount of space

162
00:06:36,460 --> 00:06:37,980
we get an error as well.

163
00:06:37,980 --> 00:06:39,840
So why would we ever want to use a 'byte'?

164
00:06:39,840 --> 00:06:41,840
A 'byte' is more efficient because it's

165
00:06:41,840 --> 00:06:44,500
in round-about terms it would normally take

166
00:06:44,500 --> 00:06:47,050
about a quarter of the amount of space of an 'integer'.

167
00:06:47,050 --> 00:06:49,440
So if you've got a lot of calculations,

168
00:06:49,440 --> 00:06:51,780
it can be far more efficient to use a 'byte'

169
00:06:51,780 --> 00:06:55,020
because the computer is not allocating as much

170
00:06:55,020 --> 00:06:57,420
space for a 'byte' than it is for an 'integer'.

171
00:06:57,420 --> 00:06:59,540
And particularly in situations where

172
00:06:59,540 --> 00:07:01,120
the computer doesn't have a lot of memory

173
00:07:01,120 --> 00:07:02,670
or there's a particular type of java

174
00:07:02,670 --> 00:07:04,270
program you're running, and particularly on

175
00:07:04,270 --> 00:07:05,910
mobile devices for arguments sake

176
00:07:05,910 --> 00:07:07,260
that haven't got a lot of memory,

177
00:07:07,260 --> 00:07:09,600
it does make sense to use the right

178
00:07:09,600 --> 00:07:11,990
data type for what you're trying to achieve.

179
00:07:11,990 --> 00:07:14,730
So that's the 'byte. There's also another one,

180
00:07:14,730 --> 00:07:17,580
which we call a 'short'. Now a 'short',

181
00:07:17,580 --> 00:07:20,780
that value for a 'short', we'll put 'myShortValue'

182
00:07:20,780 --> 00:07:24,210
for the name, and this can store a larger number.

183
00:07:24,210 --> 00:07:25,800
Around 30000 for argument's sake.

184
00:07:25,800 --> 00:07:27,360
But the actual largest number that can be

185
00:07:27,360 --> 00:07:31,050
stored in a 'short' is -32768.

186
00:07:31,050 --> 00:07:34,060
So if you try and go smaller, you get an error

187
00:07:34,060 --> 00:07:37,240
and the largest is 32767,

188
00:07:37,240 --> 00:07:39,690
and if we try to exceed it we get an error.

189
00:07:39,690 --> 00:07:41,690
So again that's a different type

190
00:07:41,690 --> 00:07:44,290
and generally speaking, a 'short'

191
00:07:44,290 --> 00:07:46,900
is allocated about twice the amount of space

192
00:07:46,900 --> 00:07:49,660
that a 'byte' is and about half the amount

193
00:07:49,660 --> 00:07:51,130
of, that an 'integer' is.

194
00:07:51,130 --> 00:07:53,530
So what I'm going to do is I'm going to put a space there

195
00:07:53,530 --> 00:07:56,330
and I'm going to put what's called a 'comment'.

196
00:07:56,330 --> 00:07:57,840
I'm going to put two slashes (//) like that

197
00:07:57,840 --> 00:07:59,430
and that defines a comment that we can just

198
00:07:59,430 --> 00:08:01,720
type something in there that is for us

199
00:08:01,720 --> 00:08:03,820
and that command is ignored by the computer.

200
00:08:03,820 --> 00:08:05,820
So it's really great for documenting

201
00:08:05,820 --> 00:08:07,820
and making sense of a program

202
00:08:07,820 --> 00:08:09,650
to give yourself some notes that you

203
00:08:09,650 --> 00:08:11,650
can refer to later. So what I'm going to do is

204
00:08:11,650 --> 00:08:14,020
just outline what these variable types

205
00:08:14,020 --> 00:08:15,550
are. So I'm going to put 'integer'

206
00:08:15,550 --> 00:08:19,380
It's good to think of an 'integer' has a width of 32.

207
00:08:19,380 --> 00:08:22,960
A 'byte', two slashes (//) again, byte

208
00:08:22,960 --> 00:08:25,710
has a width of 8.

209
00:08:25,710 --> 00:08:30,980
'short' has a width of 16.

210
00:08:30,980 --> 00:08:33,480
Now generally speaking a 'byte'

211
00:08:33,480 --> 00:08:35,140
is half the size of a 'short'.

212
00:08:35,140 --> 00:08:37,310
In computing terms, in terms of how much space has

213
00:08:37,310 --> 00:08:38,960
been allocated, and a short

214
00:08:38,960 --> 00:08:40,960
is half the size of an 'integer'.

215
00:08:40,960 --> 00:08:43,000
That's three data types that are all

216
00:08:43,000 --> 00:08:44,960
based on 'whole' numbers. There is

217
00:08:44,960 --> 00:08:47,430
one more data type and that's of use

218
00:08:47,430 --> 00:08:49,430
where you've got a number that you want

219
00:08:49,430 --> 00:08:51,910
to process that is larger than the amount for an 'int'.

220
00:08:51,910 --> 00:08:53,460
and we call that a 'long'. We put:

221
00:08:53,460 --> 00:08:57,210
'long myLongValue = 100'

222
00:08:57,210 --> 00:08:59,510
Now technically that's wrong,

223
00:08:59,510 --> 00:09:02,150
because when you're assigning a 'long' value,

224
00:09:02,150 --> 00:09:05,520
you want to actually put the letter 'l' on the end of it.

225
00:09:05,520 --> 00:09:07,690
and that tells the computer that this is a 'long'

226
00:09:07,690 --> 00:09:10,970
value. You can put lowercase 'l' or uppercase 'L'.

227
00:09:10,970 --> 00:09:13,670
I suggest you use an uppercase 'L' because that's

228
00:09:13,670 --> 00:09:15,770
a little bit easier to read than the lowercase 'l'

229
00:09:15,770 --> 00:09:17,580
sort of blends in and looks like a one (1).

230
00:09:17,580 --> 00:09:19,350
So in other words that looks like a hundred

231
00:09:19,350 --> 00:09:22,150
1001 if you don't look at it really carefully.

232
00:09:22,150 --> 00:09:24,190
But if you put a capital 'L', you can see

233
00:09:24,190 --> 00:09:26,000
clearly that's an 'L' and not a hundred.

234
00:09:26,000 --> 00:09:30,530
And a 'long has a width of 64.

235
00:09:30,530 --> 00:09:33,850
So what that means is it's double the width of an 'integer'.

236
00:09:33,850 --> 00:09:36,240
And the actual number that we can store,

237
00:09:36,240 --> 00:09:39,280
in the case of an integer, the minimum number was

238
00:09:39,280 --> 00:09:41,070
2 to the power of 31.

239
00:09:41,070 --> 00:09:44,850
But a 'long' value, we can actually store a huge number.

240
00:09:44,850 --> 00:09:47,230
It's actually 2 to the power of 63.

241
00:09:47,230 --> 00:09:48,730
So it's something like this, I'm going

242
00:09:48,730 --> 00:09:50,770
to paste the number in. I can't actually tell you what

243
00:09:50,770 --> 00:09:52,770
that number is but it's a huge number.

244
00:09:52,770 --> 00:09:54,820
But that's the minimum, that's the smallest

245
00:09:54,820 --> 00:09:56,590
possible number, and you can see there, it's got

246
00:09:56,590 --> 00:09:59,920
18 numbers after the 9, so 19 numbers in total.

247
00:09:59,920 --> 00:10:01,720
So, it's a huge value.

248
00:10:01,720 --> 00:10:04,330
And the largest value is the positive version of that.

249
00:10:04,330 --> 00:10:08,220
minus 1, so it would be like that.

250
00:10:08,220 --> 00:10:10,220
So that's the largest possible number.

251
00:10:10,220 --> 00:10:13,140
They are the four data types in Java

252
00:10:13,140 --> 00:10:14,950
that deal with 'whole' numbers.

253
00:10:14,950 --> 00:10:17,470
So when you're developing a program in Java,

254
00:10:17,470 --> 00:10:20,150
you would be deciding when you're using whole numbers

255
00:10:20,150 --> 00:10:22,270
as to which data type you'd be using

256
00:10:22,270 --> 00:10:24,060
to solve your particular problem.

257
00:10:24,060 --> 00:10:26,060
And as you work through this course,

258
00:10:26,060 --> 00:10:28,940
you'll see a lot of these data types in action.

259
00:10:28,940 --> 00:10:30,610
And you'll get more of an understanding as

260
00:10:30,610 --> 00:10:33,700
to which one to choose for a particular scenario.

261
00:10:33,700 --> 00:10:35,640
In general, as I mentioned,

262
00:10:35,640 --> 00:10:37,960
you want to choose the 'integer' by default.

263
00:10:37,960 --> 00:10:39,870
So probably 9 times out of 10,

264
00:10:39,870 --> 00:10:41,970
or 8 times out of 10, you'd go up here

265
00:10:41,970 --> 00:10:43,220
and you would choose your 'integer'

266
00:10:43,220 --> 00:10:44,990
when you're dealing with 'whole' numbers.

267
00:10:44,990 --> 00:10:47,450
Let's have a talk now about arithmetic

268
00:10:47,450 --> 00:10:48,840
in the different data types.

269
00:10:48,840 --> 00:10:50,800
In the previous video of course we did some

270
00:10:50,800 --> 00:10:53,230
basic arithmetic using the 'integers'.

271
00:10:53,230 --> 00:10:54,900
We can do something, just as a recap.

272
00:10:54,900 --> 00:10:56,740
We can come up here and we can put:

273
00:10:56,740 --> 00:11:02,770
'int myTotal = (myMinValue/2)'

274
00:11:02,770 --> 00:11:05,920
It's /, the forward slash (/) is 'divided by'.

275
00:11:05,920 --> 00:11:08,070
So that's just a simple bit of arithmetic

276
00:11:08,070 --> 00:11:10,260
which takes the value of 'myMinValue'

277
00:11:10,260 --> 00:11:16,040
which is -2,147,483,648 divided by 2.

278
00:11:16,040 --> 00:11:19,230
No problems there. Now with the 'byte' value,

279
00:11:19,230 --> 00:11:20,040
We can put:

280
00:11:20,040 --> 00:11:26,560
'byte myNewByteValue = (myByteValue/2)'

281
00:11:26,560 --> 00:11:28,730
Ahh, but we get an error.

282
00:11:28,730 --> 00:11:30,230
Now why do we get an error?

283
00:11:30,230 --> 00:11:33,980
Because the start seems to be okay but in the case of the 'integer'

284
00:11:33,980 --> 00:11:35,460
we just defined it in brackets

285
00:11:35,460 --> 00:11:38,810
to be myMinValue/2, but here we've got an error.

286
00:11:38,810 --> 00:11:40,950
And if you have a look at the error that's coming up

287
00:11:40,950 --> 00:11:43,010
on the screen it says 'Incompatible types

288
00:11:43,010 --> 00:11:45,790
Required 'byte', Found 'int'.

289
00:11:45,790 --> 00:11:47,700
So what it's saying is, well you're defining

290
00:11:47,700 --> 00:11:50,370
a variable of type 'byte' so whatever you

291
00:11:50,370 --> 00:11:53,220
type on the right hand side should be a 'byte'.

292
00:11:53,220 --> 00:11:55,220
Should be of type 'byte', and

293
00:11:55,220 --> 00:11:56,680
when we type in a number that fits

294
00:11:56,680 --> 00:11:58,840
within the range of a 'byte' it accepts it

295
00:11:58,840 --> 00:12:00,100
as you can see on the line.

296
00:12:00,100 --> 00:12:02,100
The minimum value, we haven't exceeded

297
00:12:02,100 --> 00:12:03,840
the value or we haven't exceeded the maximum

298
00:12:03,840 --> 00:12:05,840
But when you type in an 'expression',

299
00:12:05,840 --> 00:12:08,750
because remember something that isn't a fixed number

300
00:12:08,750 --> 00:12:11,300
like in the case above. This is an 'expression'.

301
00:12:11,300 --> 00:12:14,260
Whereas the one above is a 'literal',

302
00:12:14,260 --> 00:12:16,150
because it's actually just a fixed number.

303
00:12:16,150 --> 00:12:18,430
And what's happening here is this is the nature of

304
00:12:18,430 --> 00:12:21,190
Java and what I was saying about how an 'integer'

305
00:12:21,190 --> 00:12:23,370
is the sort of go to or the default

306
00:12:23,370 --> 00:12:25,370
data type you should use for whole numbers.

307
00:12:25,370 --> 00:12:27,840
By default, when you're making an assignment

308
00:12:27,840 --> 00:12:31,230
in an expression, Java converts that to an 'integer'.

309
00:12:31,230 --> 00:12:33,340
So what's happening here is, we're looking for a

310
00:12:33,340 --> 00:12:36,640
type, looking for a value that's of type 'byte'

311
00:12:36,640 --> 00:12:39,280
to put into our 'myNewByteValue'

312
00:12:39,280 --> 00:12:41,970
variable which is type 'byte'. But Java has

313
00:12:41,970 --> 00:12:44,610
converted that automatically to an 'integer'.

314
00:12:44,610 --> 00:12:46,630
And therefore, it's now complaining

315
00:12:46,630 --> 00:12:48,560
and saying, well I'm sorry but that's an 'integer',

316
00:12:48,560 --> 00:12:50,870
and you're trying to fit an 'integer' into a 'byte'.

317
00:12:50,870 --> 00:12:53,900
And we know that an 'integer' takes up a lot more

318
00:12:53,900 --> 00:12:55,990
space than a 'byte', so that number physically won't

319
00:12:55,990 --> 00:12:59,140
fit into the area of memory that has been assigned.

320
00:12:59,140 --> 00:13:01,080
This is just a weird thing that Java does

321
00:13:01,080 --> 00:13:03,080
and what you need to do to get around that

322
00:13:03,080 --> 00:13:05,720
is you need to specifically say to Java, look

323
00:13:05,720 --> 00:13:08,920
I want you to treat this as a 'byte'.

324
00:13:08,920 --> 00:13:11,340
So to do that, we do something called 'casting'.

325
00:13:11,340 --> 00:13:12,970
So we just put something in front of that, we just

326
00:13:12,970 --> 00:13:15,820
put in, in brackets 'byte'.

327
00:13:15,820 --> 00:13:19,580
So what we're saying is, Java I want you to treat

328
00:13:19,580 --> 00:13:22,460
that as a 'byte', and Java gets rid of the error and says,

329
00:13:22,460 --> 00:13:24,640
okay if that's what you want to do, I've converted...

330
00:13:24,640 --> 00:13:26,890
I'm not going to make that an 'integer' any more,

331
00:13:26,890 --> 00:13:28,890
that's now a type 'byte'. So therefore,

332
00:13:28,890 --> 00:13:31,330
'myNewByteValue' which was a type 'byte'

333
00:13:31,330 --> 00:13:33,440
has been assigned a 'byte' value

334
00:13:33,440 --> 00:13:35,630
And we might just print some of these out just

335
00:13:35,630 --> 00:13:37,630
so that we can see that we're on the right track here.

336
00:13:37,630 --> 00:13:39,110
And when you put something like:

337
00:13:39,110 --> 00:13:42,480
'myTotal =, this is a way to print the value

338
00:13:42,480 --> 00:13:44,610
and print a bit of text there as well, plus

339
00:13:44,610 --> 00:13:46,340
myTotal

340
00:13:46,340 --> 00:13:50,360
and we'll put myNewByteValue

341
00:13:50,360 --> 00:13:52,720
= myNewByteValue

342
00:13:52,720 --> 00:13:55,490
Okay, let's 'Run' that. And as you can see,

343
00:13:55,490 --> 00:13:57,490
looks like we got the right results here.

344
00:13:57,490 --> 00:13:59,820
So that's correct. Likewise for a 'short'

345
00:13:59,820 --> 00:14:01,910
you need to also do the same thing. So we can't

346
00:14:01,910 --> 00:14:09,780
just put 'short myNewShortValue = (myShortValue/2)

347
00:14:09,780 --> 00:14:11,450
As of course we get the same error.

348
00:14:11,450 --> 00:14:15,030
And the error is 'Looking for a short' and found an 'int' again.

349
00:14:15,030 --> 00:14:17,030
A similar error but this time it's the 'short'

350
00:14:17,030 --> 00:14:19,650
So we fix this one by typing 'short'

351
00:14:19,650 --> 00:14:21,870
Generally speaking, an integer is

352
00:14:21,870 --> 00:14:23,950
the way to go and you can see that is the case

353
00:14:23,950 --> 00:14:26,800
because Java by default if you don't specify the

354
00:14:26,800 --> 00:14:28,800
type that you actually want it converts it to

355
00:14:28,800 --> 00:14:30,750
an integer automatically and that's why I

356
00:14:30,750 --> 00:14:32,900
would suggest that you always work

357
00:14:32,900 --> 00:14:35,210
generally speaking with an 'integer' unless you've got

358
00:14:35,210 --> 00:14:37,070
good reason to not do that. Okay,

359
00:14:37,070 --> 00:14:38,380
so I'm going to delete that

360
00:14:38,380 --> 00:14:41,420
and I'm now going to issue a challenge to you.

361
00:14:41,420 --> 00:14:43,300
Now that I've deleted that off the screen,

362
00:14:43,300 --> 00:14:45,430
So create a 'byte' variable

363
00:14:45,430 --> 00:14:47,920
and set it to any valid 'byte' number, it doesn't matter.

364
00:14:47,920 --> 00:14:49,870
Create a 'short' variable

365
00:14:49,870 --> 00:14:51,870
and set it to any valid short number.

366
00:14:51,870 --> 00:14:54,470
Create an 'int' variable and set it to any

367
00:14:54,470 --> 00:14:55,740
valid 'int' number.

368
00:14:55,740 --> 00:14:58,900
Lastly, create a variable of type 'long'

369
00:14:58,900 --> 00:15:01,050
and make it equal to 50000

370
00:15:01,050 --> 00:15:03,450
plus 10 times the sum of the 'byte'

371
00:15:03,450 --> 00:15:05,710
plus the 'short' plus the 'integer' values.

372
00:15:05,710 --> 00:15:07,430
Okay so pause the video here

373
00:15:07,430 --> 00:15:09,350
and go away and do that and

374
00:15:09,350 --> 00:15:13,980
when you get back I'll go through and show you how to do that.
PAUSE NOW - TRY TO SOLVE - THEN PRESS PLAY.

375
00:15:14,710 --> 00:15:16,920
So how did it go, did you figure it out.

376
00:15:16,920 --> 00:15:18,590
Well let's make a start on that.

377
00:15:18,590 --> 00:15:20,940
So we'll do something like byte

378
00:15:20,940 --> 00:15:22,590
we'll call it 'byteValue'

379
00:15:22,590 --> 00:15:24,590
equals, we'll say it's '10'.

380
00:15:24,590 --> 00:15:26,750
'short' that's our first variable

381
00:15:26,750 --> 00:15:29,330
Our second variable 'shortValue'

382
00:15:29,330 --> 00:15:31,850
equal '20' and 'int'

383
00:15:31,850 --> 00:15:36,050
'intValue = 50'

384
00:15:36,050 --> 00:15:37,960
So how are we going to do the next bit? Well

385
00:15:37,960 --> 00:15:39,480
the next bit would be a 'long'.

386
00:15:39,480 --> 00:15:41,730
We'll call this 'ourLongTotal'. So we'll put:

387
00:15:41,730 --> 00:15:46,920
'ourLongTotal = 50000 +'

388
00:15:46,920 --> 00:15:51,110
'10 *' (and it's actually a lot easier than you think, it's)

389
00:15:51,110 --> 00:15:55,820
'(byteValue + shortValue + intValue)'

390
00:15:55,820 --> 00:15:57,820
It was a little bit tricky in that you don't

391
00:15:57,820 --> 00:16:00,540
need to enter the cast there

392
00:16:00,540 --> 00:16:02,850
because this is converting automatically

393
00:16:02,850 --> 00:16:05,370
to type 'long' and long will quite happily accept

394
00:16:05,370 --> 00:16:08,890
an integer. To be more precise we could probably

395
00:16:08,890 --> 00:16:13,940
put an 'L' there, 50000L + 10L *

396
00:16:13,940 --> 00:16:16,560
the byteValue + the shortValue + the integerValue

397
00:16:16,560 --> 00:16:18,560
you can print that out

398
00:16:20,470 --> 00:16:24,000
longTotal, and if you 'Run' that now,

399
00:16:24,000 --> 00:16:26,620
We get a total of 50800

400
00:16:26,620 --> 00:16:31,050
and that's because it's 10 + 20 + 50 that's 80

401
00:16:31,050 --> 00:16:37,610
So it's 50000 + (10 * 80) is 800, so that's 50800.

402
00:16:37,610 --> 00:16:39,660
So a little bit of a tricky one there in that you

403
00:16:39,660 --> 00:16:41,440
didn't need to do a cast there,

404
00:16:41,440 --> 00:16:43,460
and the point I wanted to make there

405
00:16:43,460 --> 00:16:45,510
is with variables of type

406
00:16:45,510 --> 00:16:47,550
long or integer, you really don't need to

407
00:16:47,550 --> 00:16:50,270
do any casting like you do for shorts and bytes.

408
00:16:50,270 --> 00:16:53,030
If you put a value in a bracket

409
00:16:53,030 --> 00:16:55,630
for byte or short, it will automatically be

410
00:16:55,630 --> 00:16:58,140
converted to an integer, and a variable of

411
00:16:58,140 --> 00:17:01,080
type long will also accept an integer value.

412
00:17:01,080 --> 00:17:03,420
But of course just finishing off, if we wanted to do this

413
00:17:03,420 --> 00:17:06,360
to a short variable, we going to put 'shortTotal'

414
00:17:06,360 --> 00:17:11,510
We might say it's 1000 + 10 *  and we put

415
00:17:11,510 --> 00:17:14,580
our byteValue, shortValue + intValue

416
00:17:14,580 --> 00:17:15,850
We're going to get an error there

417
00:17:15,850 --> 00:17:18,580
and what we do is we put the 'short' here.

418
00:17:18,580 --> 00:17:21,110
So everything we want to deal with there is going

419
00:17:21,110 --> 00:17:22,870
be of type 'short' and we then have

420
00:17:22,870 --> 00:17:25,080
to put another bracket there

421
00:17:25,080 --> 00:17:27,130
to make that a valid line. So

422
00:17:27,130 --> 00:17:29,360
basically saying, everything in this bracket

423
00:17:29,360 --> 00:17:32,130
is to be converted to a short.

424
00:17:32,130 --> 00:17:34,020
So you can see that Java makes you

425
00:17:34,020 --> 00:17:36,900
do a little bit more work when you're dealing with

426
00:17:36,900 --> 00:17:39,380
variables of type 'byte' or 'short'.

427
00:17:39,380 --> 00:17:41,590
And the point I want to make is that using

428
00:17:41,590 --> 00:17:44,070
integer is the best one to use generally.

429
00:17:44,070 --> 00:17:46,020
But even if you are using type 'long',

430
00:17:46,020 --> 00:17:48,490
Java handles a lot of the complexity for you

431
00:17:48,490 --> 00:17:50,490
and you don't have to do this casting.

432
00:17:50,490 --> 00:17:52,310
Because a 'long' will happily accept

433
00:17:52,310 --> 00:17:54,440
an 'integer' when you're defining a value

434
00:17:54,440 --> 00:17:57,290
total as well. And just to confirm before we finish

435
00:17:57,290 --> 00:18:00,780
if we printout 'shortTotal',

436
00:18:00,780 --> 00:18:08,900
shortTotal, shortTotal, we'll 'Run' that.

437
00:18:08,900 --> 00:18:12,610
'shortTotal' was 1800 and of course it was

438
00:18:12,610 --> 00:18:17,460
a 1000 + 10 * 80 which was the sum of those three

439
00:18:17,460 --> 00:18:21,250
10 * 80 is 800 the total was 1800.

440
00:18:21,250 --> 00:18:24,470
So that's 'bytes', 'shorts', 'integers' and 'longs.

441
00:18:24,470 --> 00:18:26,110
In the next video we're going to go ahead

442
00:18:26,110 --> 00:18:28,310
and start talking about decimal numbers.

443
00:18:28,310 --> 00:18:29,950
Because of course to date we've only

444
00:18:29,950 --> 00:18:31,410
dealt with whole numbers.

445
00:18:31,410 --> 00:18:33,660
But there are scenarios where you want to actually

446
00:18:33,660 --> 00:18:35,660
go ahead and use decimal points.

447
00:18:35,660 --> 00:18:37,600
For example converting pounds

448
00:18:37,600 --> 00:18:39,600
to kilograms or something of that nature, where you

449
00:18:39,600 --> 00:18:40,980
want to deal with decimal numbers.

450
00:18:40,980 --> 00:18:43,080
So we'll go ahead and work on that

451
00:18:43,080 --> 00:18:45,080
in the next video.

